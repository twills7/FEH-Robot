// Import all necessary libraries here
#include <FEHIO.h>
#include <FEHLCD.h>
#include <FEHUtility.h>
#include <FEHBuzzer.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHServo.h>
#include <FEHSD.h>

#define SLEEP 1.0

/*
Motors are declared with both forward directions being positive 
*/
FEHMotor leftDrive(FEHMotor::Motor2, 9.0);
FEHMotor rightDrive(FEHMotor::Motor1, 9.0);
DigitalEncoder right_encoder(FEHIO::P2_0);
DigitalEncoder left_encoder(FEHIO::P3_0);


AnalogInputPin cds (FEHIO::P0_0);

FEHServo forklift(FEHServo::Servo7);
FEHServo luggage(FEHServo::Servo4);
// Import all necessary libraries here


#define SLEEP 1.0
#define DISTANCE_1 10.0
#define PI 3.1415
#define WHEEL_GAP 7.625
#define MOTOR_MULTIPLIER30 1.0175
#define MOTOR_MULTIPLIER50 0.96125
#define SERVO_MIN 717
#define SERVO_MAX 2428
#define LEVER_DEGREE 1
#define LUG_MIN 500
#define LUG_MAX 2433
// old: 1.02
// Fill in the pin declarations

static void drive(float power, float distance){
	
    float shaft = (distance * 318.0) / (PI * 2.5);
	float rightMotor = 0.0;
	if (power == 30.0 || power == -30.0){
		rightMotor = MOTOR_MULTIPLIER30 * power;
	}else if (power == 50.0 || power == -50.0){
		rightMotor = MOTOR_MULTIPLIER50 * power;
	}
    rightDrive.SetPercent(rightMotor);
    leftDrive.SetPercent(power);
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

	// FEHFile *fptr = SD.FOpen("RESULTS.txt", "w");
	
    while (right_encoder.Counts() + left_encoder.Counts() <= (shaft * 2)) {
		// SD.FPrintf(fptr, "Left Counts: %d, Right Counts: %d\n", left_encoder.Counts(), right_encoder.Counts());
		// LCD.Write("Left Shaft Counts ");
		// LCD.WriteLine(left_encoder.Counts());
		// LCD.Write("Right Shaft Counts");
		// LCD.WriteLine(right_encoder.Counts());
	}
	

	rightDrive.Stop();
	leftDrive.Stop();
	// SD.FClose(fptr);
}

static void orientLeft() {
	
	float shaft = WHEEL_GAP * PI * 318.0 / (4.0 * PI * 2.5);
	float power = 30.0;
	float rightMotor = MOTOR_MULTIPLIER30 * power;

	right_encoder.ResetCounts();
    left_encoder.ResetCounts();
	rightDrive.SetPercent(rightMotor);
    leftDrive.SetPercent(-power);
	
	while (right_encoder.Counts() + left_encoder.Counts() <= (shaft * 2)) {

	}
	rightDrive.Stop();
	leftDrive.Stop();
}

static void orientRight() {
	float shaft = WHEEL_GAP * PI * 318.0 / (4.0 * PI * 2.5);
	float power = 30.0;
	float rightMotor = MOTOR_MULTIPLIER30 * power;
	
	right_encoder.ResetCounts();
    left_encoder.ResetCounts();
	rightDrive.SetPercent(-rightMotor);
    leftDrive.SetPercent(power);
	
	while (right_encoder.Counts() + left_encoder.Counts() <= (shaft * 2)) {

	}
	rightDrive.Stop();
	leftDrive.Stop();
}

static void orient(float degrees, int leftRight) { // 1 for left, 2 for right
	float ratioShaft = 360.0 / degrees;
	float shaft = WHEEL_GAP * PI * 318.0 / (ratioShaft * PI * 2.5);
	float power = 30.0;
	float rightMotor = MOTOR_MULTIPLIER30 * power;
	
	if (leftRight == 1) {
		rightDrive.SetPercent(rightMotor);
    	leftDrive.SetPercent(-power);
	}
	else if (leftRight == 2) {
		rightDrive.SetPercent(-rightMotor);
    	leftDrive.SetPercent(power);
	}
	else {
		LCD.WriteLine("Error: Invalid turn direction specified.");
	}
	right_encoder.ResetCounts();
    left_encoder.ResetCounts();
	
	while (right_encoder.Counts() + left_encoder.Counts() < (shaft * 2)) {

	}
	rightDrive.Stop();
	leftDrive.Stop();
}

static int cdsShowReading() {
	float value;
	int redCounter = 0;
	int blueCounter = 0;
	int color = -1;
	int noColorCount = 0;

	while(color == -1) {
		value = cds.Value();
		LCD.WriteLine(value);
		if (0.9 > value && value > 0.4) {
			redCounter = 0;
			// noColorCount = 0;
			blueCounter ++;
			if (blueCounter > 3) {
				LCD.WriteLine("Detected blue at nose of airplane!");
				color = 2;
			}
		}
		else if (0.35 > value && value > 0.05) {
			blueCounter = 0;
			// noColorCount = 0;
			redCounter ++;
			if (redCounter > 3) {
				LCD.WriteLine("Detected red at nose of airplane!");
				color = 1;
			}
		}
		else {
			noColorCount ++;
			if (noColorCount > 10) {
				color = 2;
			}
		}
		Sleep(0.5);
		LCD.Clear();
	}
	return color;
}

static void cdsDetect(float min, float max) {
	// double old = TimeNow();
	// double newTime = TimeNow() - old;
	while((cds.Value() < min || cds.Value() > max)) {
		LCD.Write("To start, awaiting value above ");
		LCD.Write(min);
		LCD.Write(" and below ");
		LCD.WriteLine(max);
		LCD.Write("Currently at: ");
		LCD.WriteLine(cds.Value());
		// LCD.WriteLine(newTime);
		Sleep(1.0);
		LCD.Clear();
		// newTime = TimeNow() - old;
	}
	LCD.WriteLine("Starting!");
}

static void ticket(int color) { // 1 is red, 2 is blue 
	if (color == 1) {
		drive(40.0, 9);
	}
	else if (color == 2) {
		drive(40.0, 5);
	}
	orient(92.0, 2);
	rightDrive.SetPercent(-30.0);
	leftDrive.SetPercent(-30.0);
	Sleep(2.5);
	rightDrive.Stop();
	leftDrive.Stop();
}

void pulse_forward(int percent, float seconds)
{
    // Set both motors to desired percent
    rightDrive.SetPercent(percent * MOTOR_MULTIPLIER30);
    leftDrive.SetPercent(percent);

    // Wait for the correct number of seconds
    Sleep(seconds);

    // Turn off motors
    rightDrive.Stop();
    leftDrive.Stop();
}
void pulse_counterclockwise(int percent, float seconds)
{
    // Set both motors to desired percent
    rightDrive.SetPercent(percent);
    leftDrive.SetPercent(-percent);

    // Wait for the correct number of seconds
    Sleep(seconds);

    // Turn off motors
    rightDrive.Stop();
    leftDrive.Stop();
}
void turn_counterclockwise(int percent, int counts)
{
    // Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    // Set both motors to desired percent
    rightDrive.SetPercent(percent);
    leftDrive.SetPercent(-percent);

    // While the average of the left and right encoder are less than counts,
    // keep running motors
    while ((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    // Turn off motors
    rightDrive.Stop();
    leftDrive.Stop();
}
void check_x(float x_coordinate, int orientation)
{
    // Determine the direction of the motors based on the orientation of the QR code
    int power = 30;
    if (orientation == 1)
    {
        power = -30;
    }

    // Check if receiving proper RPS coordinates and whether the robot is within an acceptable range
    while (RPS.X() > -1.1  && (RPS.X() < x_coordinate - 0.3 || RPS.X() > x_coordinate + 0.3))
    {
        if (RPS.X() > x_coordinate + 0.3)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_forward(-power, 0.1);
        }
        else if (RPS.X() < x_coordinate - 0.3)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_forward(power, 0.1);
        }
        Sleep(0.3);
    }
}

void check_y(float y_coordinate, int orientation)
{
    // Determine the direction of the motors based on the orientation of the QR code
    int power = 30;
    if (orientation == 1)
    {
        power = -30;
    }

    // Check if receiving proper RPS coordinates and whether the robot is within an acceptable range
    while (RPS.Y() > -1.1 && (RPS.Y() < y_coordinate - 0.3 || RPS.Y() > y_coordinate + 0.3))
    {
        if (RPS.Y() > y_coordinate + 0.3)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_forward(-power, 0.1);
        }
        else if (RPS.Y() < y_coordinate - 0.3)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_forward(power, 0.1);
        }
        Sleep(0.3);
    }
}

void moveForklift(float degree){
	forklift.SetMin(SERVO_MIN);
	forklift.SetMax(SERVO_MAX);
	forklift.SetDegree(degree);
}

void moveLuggage(float degree){
	luggage.SetMin(LUG_MIN);
	luggage.SetMax(LUG_MAX);
	luggage.SetDegree(degree);
}

void check_heading(float heading)
{
   // heading is input for direction 
   // float currentHeading = RPS.Heading();
   while (heading < (RPS.Heading() - 1.5) || heading > (RPS.Heading() + 1.5)) {
		if (RPS.Heading() > heading + 1.5)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_counterclockwise(-20, 0.1);
        }
        else if (RPS.Heading() < heading - 1.5)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_counterclockwise(25, 0.1);
        }
        Sleep(0.6);
   }
}

void check_heading2(float heading)
{
   // heading is input for direction 
   // float currentHeading = RPS.Heading();
   while (heading < (RPS.Heading() - 0.5) || heading > (RPS.Heading() + 0.5)) {
		if (RPS.Heading() > heading + 0.5)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_counterclockwise(-20.0, 0.1);
        }
        else if (RPS.Heading() < heading - 0.5)
        {
            // Pulse the motors for a short duration in the correct direction
            pulse_counterclockwise(18.0, 0.1);
        }
        Sleep(0.6);
   }
}

static int ticketKioskTask(float xCoord, float yCoord) {
	
	check_heading(90.0);
	check_x(xCoord, 0); // ~11.2 Course B, ~11.6 Course A
	orient(80.0, 1);
	check_heading2(175.0);
	drive(30.0, 10.0);
	check_y(yCoord, 0); // ~ 59.7 Course B, ~60.4 Course A
	
	// ticket kiosk component 
	int color = cdsShowReading();
	orient(90.0, 2);
	check_heading(90.0);
	ticket(color);
	return color;
}

static void setServos() {
	//start at 90 degrees
	moveForklift(90.0);
	moveLuggage(100.0);


}
static int startRun(){    
    // Get correct lever from the RPS
    int correctLever = RPS.GetCorrectLever();
	cdsDetect(0.0, 0.35);
	drive(30.0, 20.0);
    orient(40.0, 1);
	return correctLever;
}

static void passportFlip(int color){
    if (color == 2){
        check_y(56, 1);
	    orient(92.0, 1);
    }else{
        drive(30.0, 2.5);
        orient(45, 2);
        check_y(56, 1);
        orient(137.0, 1);
    }
    check_heading(90.0);
	drive(-30.0, 4.5);
	moveForklift(5);
	check_x(17.25, 0);
	moveForklift(100);
	
}
static void fuelLever(int correctLever){
    // Check which lever to flip and perform some action
    if(correctLever == 0)
    {
		drive(30.0, 1.5);
        orient(90.0, 1);
		
    } 
    else if(correctLever == 1)
    {
        drive(30.0, 5.0);
        orient(90.0, 1);
    }
    else if(correctLever == 2)
    {
        drive(30.0, 7.5);
        orient(80.0, 1);
    }
	drive(-30.0, 3.75);
	
    moveForklift(30.0);
	drive(30.0, 0.75);
	// flip down 
	moveForklift(10.0);
	Sleep(0.5);
	moveForklift(30.0);
	// sleep then back up 
	Sleep(4.5);
	drive(-30.0, 3);

	// change servo to down position to flip back up
	moveForklift(0.0);
	drive(30.0, 2.75);
	moveForklift(20.0);
	moveForklift(40.0);
	Sleep(0.5);
	drive(-30.0, 2);
	moveForklift(20.0);
	if (correctLever < 2) {
		drive(-30.0, 2);
	}
	else {
		drive(-30.0, 1);
	}
	
	moveForklift(90.0);
	orient(90.0, 2);
	leftDrive.SetPercent(30.0);
	rightDrive.SetPercent(30.0);
	Sleep(2.0);
	leftDrive.Stop();
	rightDrive.Stop();
	orient(100.0, 2);
    drive(-30.0, 4);
    check_heading(180.0);
}

static void luggageDrop(float xCoord, float yCoord){
	drive(50.0, 24); 
	check_heading(180.0);
	check_y(yCoord, 0); // yCoord that works is ~42.4+ Course B, ~42.9 Course A
	orient(95.0, 2);
	check_heading(90.0);
	check_x(xCoord, 0); // xCoord that works is ~8.3 - ~8.7 Course B, ~9.0 Course A
	moveLuggage(160);
	Sleep(1.0);
	drive(-30.0, 6.0);
	moveLuggage(120.0);
}

static void checkpoint5() {
	moveLuggage(90.0);
	int lever = startRun();
	leftDrive.SetPercent(30.0);
	rightDrive.SetPercent(30.0);
	Sleep(2.0);
	orient(95.0, 2);
	check_heading2(183.0);
	drive(50.0, 21.0);
	check_y(43.5, 0);
	orient(95.0, 2);
	check_heading2(90.0);
	check_x(13, 0);
	moveLuggage(160.0);
	Sleep(1.0);
	leftDrive.SetPercent(-30.0);
	rightDrive.SetPercent(-30.0);
	Sleep(1.0);
	check_heading2(95.0);
	leftDrive.SetPercent(30.0);
	rightDrive.SetPercent(30.0);
	Sleep(5.0);
	orient(95.0, 2);
	leftDrive.SetPercent(40.0);
	rightDrive.SetPercent(40.0);
}

void setPointsOfInterest()
{
	// Initialize the RPS
    RPS.InitializeTouchMenu();
    // Declare variables
    float touch_x, touch_y;
    char points[2] = {'A', 'B'}; // 1 is num points of interest

    // Open SD file for writing
    FEHFile *fptr = SD.FOpen("RPS_POIs.txt", "w");
	
    Sleep(100);
    LCD.Clear();

    // Wait for touchscreen to be pressed and released
    LCD.WriteLine("Press Screen to Record");
    while (!LCD.Touch(&touch_x, &touch_y));
    while (LCD.Touch(&touch_x, &touch_y));

    LCD.ClearBuffer();

    // Clear screen
    Sleep(100); // wait for 100ms to avoid updating the screen too quickly
    LCD.Clear();

    // Write initial screen info
    LCD.WriteRC("X Position:", 11, 0);
    LCD.WriteRC("Y Position:", 12, 0);
    LCD.WriteRC("   Heading:", 13, 0);

    // Step through each path point to record position and heading
    for (int n = 0; n < 2; n++) // 1 is num points of interest
    {
        // Write point letter
        LCD.WriteRC("Touch to set point ", 9, 0);
        LCD.WriteRC(points[n], 9, 20);

        // Wait for touchscreen to be pressed and display RPS data
        while (!LCD.Touch(&touch_x, &touch_y))
        {
            LCD.WriteRC(RPS.X(), 11, 12);       // update the x coordinate
            LCD.WriteRC(RPS.Y(), 12, 12);       // update the y coordinate
            LCD.WriteRC(RPS.Heading(), 13, 12); // update the heading

            Sleep(100); // wait for 100ms to avoid updating the screen too quickly
        }
        while (LCD.Touch(&touch_x, &touch_y));
        LCD.ClearBuffer();

        // Print RPS data for this path point to file
        SD.FPrintf(fptr, "%f %f\n", RPS.X(), RPS.Y());
    }

    // Close SD file
    SD.FClose(fptr);
    LCD.Clear();
}

static void driveBack(){
	orient(95.0, 2);
	drive(30.0, 14.0);
	orient(95.0, 1);
    moveLuggage(90.0);
	check_heading(90.0);
	rightDrive.SetPercent(30.0);
	leftDrive.SetPercent(30.0);
	Sleep(2.5);
	leftDrive.Stop();
	rightDrive.Stop();
	orient(95.0, 2);
    //drive(30.0, 3);
    //moveLuggage(160);  For secondary luggage drop if first one fails
    //drive(-30, 3.0);
	drive(30.0, 18.0);
	check_heading(2.0);
	rightDrive.SetPercent(40.0);
	leftDrive.SetPercent(40.0);
}

int main() {
	LCD.Clear();
	setServos();
	setPointsOfInterest();
	//reading POI
	FEHFile *fptr = SD.FOpen("RPS_POIs.txt", "r");
	float A_x, A_y, B_x, B_y;
    SD.FScanf(fptr, "%f%f", &A_x, &A_y);
	SD.FScanf(fptr, "%f%f", &B_x, &B_y);
    SD.FClose(fptr);

	int lever = startRun();
	fuelLever(lever);
	luggageDrop(A_x, A_y);
	int color = ticketKioskTask(B_x, B_y);
	passportFlip(color);
	driveBack();
	return 0;
}
