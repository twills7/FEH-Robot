#include <FEHIO.h>
#include <FEHMotor.h>
#include <FEHLCD.h>
 
int main(void)
{
    //declares a digital encoder on P0_3
    DigitalEncoder right_encoder(FEHIO::P1_0);
    DigitalEncoder left_encoder(FEHIO::P1_1);
 
    //declares a motor on motor port 0
    FEHMotor right_motor(FEHMotor::Motor1, 9.0);
    FEHMotor left_motor(FEHMotor::Motor0, 9.0);
 
    //turn on the right motor to 25% power
    left_motor.SetPercent( 30.0 );
    right_motor.SetPercent( 30.0 );
 
    //ensure that the encoder counts are at zero by resetting
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
 
    //wait until the right encoder reaches 500 counts
    while(right_encoder.Counts() < 567 || left_encoder.Counts() < 567){
        if (right_encoder.Counts() > 567){
            right_motor.Stop();
        }
        if (left_encoder.Counts() > 567){
            left_motor.Stop();
        }
    };
 
    //stop the motor
    right_motor.Stop();
    left_motor.Stop();


    //turn on the right motor to 25% power
    left_motor.SetPercent( -20.0 );
    right_motor.SetPercent( 20.0 );
 
    //ensure that the encoder counts are at zero by resetting
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
 
    //wait until the right encoder reaches 500 counts
    while(right_encoder.Counts() < 215 || left_encoder.Counts() < 215){
        if (right_encoder.Counts() > 215){
            right_motor.Stop();
        }
        if (left_encoder.Counts() > 215){
            left_motor.Stop();
        }
    };


//turn on the right motor to 25% power
    left_motor.SetPercent( 30.0 );
    right_motor.SetPercent( 30.0 );
 
    //ensure that the encoder counts are at zero by resetting
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
 
    //wait until the right encoder reaches 500 counts
    while(right_encoder.Counts() < 567 || left_encoder.Counts() < 567){
        if (right_encoder.Counts() > 567){
            right_motor.Stop();
        }
        if (left_encoder.Counts() > 567){
            left_motor.Stop();
        }
    };
    //turn on the right motor to 25% power
    left_motor.SetPercent( 20.0 );
    right_motor.SetPercent( -20.0 );
 
    //ensure that the encoder counts are at zero by resetting
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
 
    //wait until the right encoder reaches 500 counts
    while(right_encoder.Counts() < 215 || left_encoder.Counts() < 215){
        if (right_encoder.Counts() > 215){
            right_motor.Stop();
        }
        if (left_encoder.Counts() > 215){
            left_motor.Stop();
        }
    };


    //turn on the right motor to 25% power
    left_motor.SetPercent( 30.0 );
    right_motor.SetPercent( 30.0 );
 
    //ensure that the encoder counts are at zero by resetting
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();
 
    //wait until the right encoder reaches 500 counts
    while(right_encoder.Counts() < 162 || left_encoder.Counts() < 162){
        if (right_encoder.Counts() > 162){
            right_motor.Stop();
        }
        if (left_encoder.Counts() > 162){
            left_motor.Stop();
        }
    };


   float LE_counts = left_encoder.Counts();
   float RE_counts = right_encoder.Counts();
    LCD.Clear();
    LCD.Write("Left Counts: ");
    LCD.WriteLine(LE_counts);
    LCD.Write("Right Counts: ");
    LCD.WriteLine(RE_counts);
}

